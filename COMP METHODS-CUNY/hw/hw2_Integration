import numpy as np
import matplotlib.pyplot as plt
import math 


"""HW.2 

    E(x) = int 0 to x e^(-t^2)dt 

A) Write a program to calculate E(x) for values of x from 0 to 3 
in steps of 0.1. Choose for yourself what method you will use for 
performing the integral and a suitable number of slices.

b) When you are convinced your program is working, extend it 
further to make a graph of E(x) as a function of x.

Note that there is no known way to perform this particular integral 
analytically, so numerical approaches are the only way forward.


"""
##USING TRAPEZOIDAL RULE
def E(t):     #This is the a defined function to integrate
    return np.exp(-t**2)

N=1000 #number of slices 
a= 0    #lower limit of integration
b=3     #higher limit of integration 
step = 0.1  #steps  


if a > b:
    raise ValueError(" 'a' must be less than 'b' ")

x_values = np.arange(0,3.1,0.1) # a=0, bb= 3.1 to be inclusive and in 0.1 step size
E_values = []
for x in x_values:   ##double for loop so it will take an x vaule from the x_value-array in 
                      #steps 0f 0.1 and do the integral 
    s = 0.5*E(a) +0.5*E(x)
    h = (x-a)/N 
    for k in range (1, N):
        s += E(a+k*h)
    val= h*s 
    E_values.append(val)


print (f"X values: {x_values}")
print (f"E(x) values: {E_values}")


"""WE CAN ALSO DEFINE A FUNCTION OF THE TRAPEZOIDAL SO THAT 
A,B AND N ARE ARBITRARY NUMBERS """

def TrapRule(a1,b1,N1):  #here we just insert the upper (a), lower(b) and number of Slices
    s1 = 0.5*E(a1) +0.5*E(b1)
    h1 = (b1-a1)/N1 
    for k in range (1, N1):
        s1 += E(a1+k*h1)
    return h1*s1 
###This is if we want to make the user input the arbitrary numbers
# since we are not doing in .1 steps, the answer will be a single number for this
a1 = float(input("Enter lower limit (a): "))
b1 = float(input("Enter higher limit (b): "))
N1 = int(input("Enter number of slices (N): "))
e = TrapRule(a1, b1, N1)

##plot E(x) as a function of x

plt.plot(x_values, E_values, color='g')
plt.xlabel("x")
plt.ylabel("E(x)")
plt.title("E(x) as a function of x for E(x)= e^(-t^2) from 0 to 3")
plt.grid()
plt.show()


"""PS: I did use aI in the part of two loops, becuase I was getting the 
same value for all x values, and so I asked what the problem was, and it was cuz
I hard coded the b value (3) instead of doing x in x_values which is 0-3.1 in 0.1 steps. """